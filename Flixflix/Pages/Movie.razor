@page "/movie/details/{id}"
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IJSRuntime JS
@inject theMovieDb theMovieDb
@layout MovieLayout

@using System.Text.Json;

@if (movie.title != null)
{
    <main class="movie-bg" style="background-image: url(@($"https://image.tmdb.org/t/p/original{movie.backdrop_path}"));
          background-color: rgb(@random.Next(255), @random.Next(255), @random.Next(255)) ">
        <div class="overlay p-3 container">


            <article class="movie-info-card row">
                <div class="mb-3 d-flex justify-content-between">
                    <div>
                        <button class="btn btn-dark" @onclick="goHome">
                            <span class="oi oi-home" aria-hidden="true"></span> Inicio
                        </button>
                    </div>
                    <div>
                        <PuntuationButtons movie="movie" HandleValoration="HandleValoration" />
                    </div>
                </div>
                <div class="col-md-5 mb-3">
                    <img src="@($"https://image.tmdb.org/t/p/original{movie.poster_path}")" class="card-img"
                        alt="@movie.title">
                </div>
                <div class="col">
                    <h4>@movie.title</h4>
                    <p>@movie.release_date</p>
                    <p>@movie.overview</p>

                    <div class="fs-4 px-1 mb-3">Comentarios:</div>
                    <textarea class="movie-comment" @bind="movie.userComment" @oninput="OnInput" />
                </div>
            </article>
        </div>
    </main>
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public string id { get; set; }
    private theMovieDb.Result movie = new theMovieDb.Result();
    private Timer debounceTimer;

    private List<theMovieDb.Result> MoviesVault = new List<theMovieDb.Result>();

    private Random random = new Random();

    private async Task getStoredMovies()
    {
        var movieStore = await JS.InvokeAsync<string>("localStorage.getItem", "storedMovies");
        if (movieStore != null)
        {
            MoviesVault = JsonSerializer.Deserialize<List<theMovieDb.Result>>(movieStore);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        int movieId = int.Parse(id);
        await getStoredMovies();

        var cachedMovie = MoviesVault?.FirstOrDefault(m => m.id == movieId);
        var movieFromList = theMovieDb?.MoviesList?.results?.FirstOrDefault(m => m.id == movieId);

        if (cachedMovie != null)
        {
            movie = cachedMovie;
            Console.WriteLine("Cargado desde la caché");
        }
        else if (movieFromList != null)
        {
            movie = movieFromList;
            Console.WriteLine("Cargado desde la lista");
        }
        else
        {
            goHome();
        }
    }

    private void goHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleValoration(string e)
    {
        //Comprueba que elemento es el que se le pasa y hace una acción u otra
        if (e == "like")
        {
            var valoration = movie.userValoration != true ? movie.userValoration = true : movie.userValoration = null;
            movie.userValoration = valoration;
        }
        if (e == "dislike")
        {
            var valoration = movie.userValoration != false ? movie.userValoration = false : movie.userValoration = null;
            movie.userValoration = valoration;
        }
        if (e == "watched")
        {
            movie.userWatched = !movie.userWatched;
        }

        await getStoredMovies();

        var cachedMovie = MoviesVault.FirstOrDefault(m => m.id == movie.id);

        if (cachedMovie != null)
        {
            cachedMovie.userValoration = movie.userValoration;
            cachedMovie.userWatched = movie.userWatched;
            Console.WriteLine("Preferencias actualizadas");
        }
        else
        {
            MoviesVault.Add(movie);
            Console.WriteLine("Preferencias almacenadas");
        }

        string storedMoviesJson = JsonSerializer.Serialize(MoviesVault);

        await JS.InvokeVoidAsync("localStorage.setItem", "storedMovies", storedMoviesJson);
    }

    private void OnInput(ChangeEventArgs e)
    {
        movie.userComment = e.Value.ToString();
        if (debounceTimer != null)
        {
            debounceTimer.Dispose();
        }
        debounceTimer = new Timer(HandleComment, null, 100, Timeout.Infinite);
    }

    private async void HandleComment(object state)
    {
        var cachedMovie = MoviesVault.FirstOrDefault(m => m.id == movie.id);
        if (cachedMovie != null)
        {
            cachedMovie.userComment = movie.userComment;
            Console.WriteLine("Preferencias actualizadas");
        }
        else
        {
            MoviesVault.Add(movie);
            Console.WriteLine("Preferencias almacenadas");
        }
        string storedMoviesJson = JsonSerializer.Serialize(MoviesVault);

        await JS.InvokeVoidAsync("localStorage.setItem", "storedMovies", storedMoviesJson);
    }


}
